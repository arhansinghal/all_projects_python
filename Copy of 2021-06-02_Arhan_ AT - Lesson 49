{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Copy of 2021-06-02_Arhan_ AT - Lesson 49","provenance":[{"file_id":"17ifEe0zPmCQ0czrMqzOumw7WcpeJ-6US","timestamp":1622617532928},{"file_id":"1iSpUD1RkTOJ-F9faeei2xiXUpXlVCIgV","timestamp":1622615468876},{"file_id":"1umxx1B60ZyxWcZfbA4BTOX9D_0AUA2LS","timestamp":1595194336104},{"file_id":"17YqQu2ixfJNNr_CXazHMG3-2fzPQRPXM","timestamp":1594826975613}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"Q7hw3pDcIn2J"},"source":["# Lesson 49: Central Limit Theorem I"]},{"cell_type":"markdown","metadata":{"id":"ze9uSJt-I-0E"},"source":["### Teacher-Student Activities\n","\n","In this class, you will learn about sampling distribution and Central Limit Theorem which is one of the most important theorems used in statistical inference. We will implement the Central Limit Theorem on a **Heart Disease dataset**. For this, we need to learn a simple concept called sampling. Before we continue further, let's load the heart disease dataset.\n","\n","**Data Description**\n","\n","The heart Disease UCI dataset contains data collected on 14 different attributes by examining 303 patients. The dataset focuses only on differentiating patients having heart disease; labelled as value 1 and those not having heart disease; labelled as value 0. The 14 attributes (or columns) are as follows:\n","\n","|Columns|Description|\n","|-|-|\n","|age|age in years|\n","|sex|sex (1 = male; 0 = female)|\n","|cp|chest pain type (4 values)|\n","|trestbps|resting blood pressure (in mm Hg on admission to the hospital)|\n","|chol|serum cholesterol in $\\frac{mg}{dl}$|\n","|fbs|fasting blood sugar > 120 $\\frac{mg}{dl}$|\n","|restecg|resting electrocardiographic results (values 0, 1, 2)|\n","|thalach|maximum heart rate achieved|\n","|exang|exercise induced angina (1 = yes; 0 = no)|\n","|oldpeak|ST depression induced by exercise relative to rest|\n","|slope|the slope of the peak exercise ST segment|\n","|ca|number of major vessels (0-3) colored by fluoroscopy|\n","|thal|A blood disorder called thalassemia|\n","|target|1 = presence of heart disease; 0 = absence of heart disease|\n","\n","**Source:** https://archive.ics.uci.edu/ml/datasets/Heart+Disease\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"BpKI2pWEtREK"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"f2UBkl1AZuRc"},"source":["#### Activity 1: Loading Data\n","\n","Load the heart disease dataset. Here's the dataset link:\n","\n","https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/whitehat-ds-datasets/uci-heart-disease/heart.csv\n"]},{"cell_type":"code","metadata":{"id":"tmRB05lddS--","colab":{"base_uri":"https://localhost:8080/","height":195},"executionInfo":{"status":"ok","timestamp":1622615851424,"user_tz":-330,"elapsed":1387,"user":{"displayName":"Arhan Singhal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg4PdbuZAsAVBem9gfXxGllkTugQRSsMItz_luU=s64","userId":"10909470486853968911"}},"outputId":"9f3c8947-9239-455f-9525-5e07d336ca3a"},"source":["# S1.1: Import the required modules and load the heart disease dataset. Also, display the first five rows.\n","import pandas as pd \n","df = pd.read_csv('https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/whitehat-ds-datasets/uci-heart-disease/heart.csv')\n","df.head()"],"execution_count":1,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>age</th>\n","      <th>sex</th>\n","      <th>cp</th>\n","      <th>trestbps</th>\n","      <th>chol</th>\n","      <th>fbs</th>\n","      <th>restecg</th>\n","      <th>thalach</th>\n","      <th>exang</th>\n","      <th>oldpeak</th>\n","      <th>slope</th>\n","      <th>ca</th>\n","      <th>thal</th>\n","      <th>target</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>63</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>145</td>\n","      <td>233</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>150</td>\n","      <td>0</td>\n","      <td>2.3</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>37</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>130</td>\n","      <td>250</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>187</td>\n","      <td>0</td>\n","      <td>3.5</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>41</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>130</td>\n","      <td>204</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>172</td>\n","      <td>0</td>\n","      <td>1.4</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>56</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>120</td>\n","      <td>236</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>178</td>\n","      <td>0</td>\n","      <td>0.8</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>57</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>120</td>\n","      <td>354</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>163</td>\n","      <td>1</td>\n","      <td>0.6</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   age  sex  cp  trestbps  chol  fbs  ...  exang  oldpeak  slope  ca  thal  target\n","0   63    1   3       145   233    1  ...      0      2.3      0   0     1       1\n","1   37    1   2       130   250    0  ...      0      3.5      0   0     2       1\n","2   41    0   1       130   204    0  ...      0      1.4      2   0     2       1\n","3   56    1   1       120   236    0  ...      0      0.8      2   0     2       1\n","4   57    0   0       120   354    0  ...      1      0.6      2   0     2       1\n","\n","[5 rows x 14 columns]"]},"metadata":{"tags":[]},"execution_count":1}]},{"cell_type":"markdown","metadata":{"id":"h1a-clG-jqPr"},"source":["Let's first look at the complete information on the `df` DataFrame."]},{"cell_type":"code","metadata":{"id":"M2x3F5XtkAGd","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1622615878830,"user_tz":-330,"elapsed":346,"user":{"displayName":"Arhan Singhal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg4PdbuZAsAVBem9gfXxGllkTugQRSsMItz_luU=s64","userId":"10909470486853968911"}},"outputId":"392b01e8-ce84-4308-887c-d75af13d61d3"},"source":["# S1.2: Apply the 'info()' function on the 'df' DataFrame.\n","df.info()"],"execution_count":2,"outputs":[{"output_type":"stream","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 303 entries, 0 to 302\n","Data columns (total 14 columns):\n"," #   Column    Non-Null Count  Dtype  \n","---  ------    --------------  -----  \n"," 0   age       303 non-null    int64  \n"," 1   sex       303 non-null    int64  \n"," 2   cp        303 non-null    int64  \n"," 3   trestbps  303 non-null    int64  \n"," 4   chol      303 non-null    int64  \n"," 5   fbs       303 non-null    int64  \n"," 6   restecg   303 non-null    int64  \n"," 7   thalach   303 non-null    int64  \n"," 8   exang     303 non-null    int64  \n"," 9   oldpeak   303 non-null    float64\n"," 10  slope     303 non-null    int64  \n"," 11  ca        303 non-null    int64  \n"," 12  thal      303 non-null    int64  \n"," 13  target    303 non-null    int64  \n","dtypes: float64(1), int64(13)\n","memory usage: 33.3 KB\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"RgnxI54ckEb6"},"source":["As you can see there are 303 entries for each column and no missing values. For implementing the Central Limit theorem, we need to choose a column having continuous numeric values. So, let's consider `chol` (cholesterol) column and plot its distribution."]},{"cell_type":"markdown","metadata":{"id":"f6cHtaNIxePz"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"_7HeL3fGxe4Q"},"source":["#### Activity 2: Sampling\n","\n","**Q: What is sampling?**\n","\n","Sampling is a process of taking a few data points (or observations) from an entire column. Let's draw a sample of 10 cholesterol values from the `chol` column. For this, you need to use the `sample()` function from the `pandas` module. The source of the sample itself becomes the population. It takes an integer value as input which denotes the number of samples to be drawn.\n","\n","**Syntax: `sample(n = num_of_samples)`**\n","\n"]},{"cell_type":"code","metadata":{"id":"sv2HkJAiZhH7","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1622616014877,"user_tz":-330,"elapsed":335,"user":{"displayName":"Arhan Singhal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg4PdbuZAsAVBem9gfXxGllkTugQRSsMItz_luU=s64","userId":"10909470486853968911"}},"outputId":"d6076945-6635-45a2-960e-b1f9582195c0"},"source":["# S2.1: Draw a sample of 10 cholesterol values from the 'chol' column.\n","sc = df['chol']\n","s1 = sc.sample(n = 10)\n","s1"],"execution_count":3,"outputs":[{"output_type":"execute_result","data":{"text/plain":["86     277\n","191    216\n","19     239\n","273    234\n","235    299\n","143    223\n","257    200\n","109    254\n","61     309\n","103    240\n","Name: chol, dtype: int64"]},"metadata":{"tags":[]},"execution_count":3}]},{"cell_type":"markdown","metadata":{"id":"pvPhUc0wZU93"},"source":["As you can see, we have taken a sample of 10 random cholesterol values from the `chol` column.\n","\n","**Q: Why do we need to do sampling?**\n","\n","Sometimes there is a need to draw some valid conclusions from a large group of individuals or the entire population. Suppose you need to find out the common symptoms found in the patient of heart disease. It may not be feasible or  impossible to examine the symptoms of the entire population. Instead we may examine only a small part or portion of the population known as **sample**. In this way, we can find out what are the common symptoms of heart disease found in patients for the entire population based on the results found in the sample. \n","\n","\n","**Mean of Samples**\n","\n","We will draw several random samples and find their means. Then we will plot the means on a histogram. You will see that means of all the samples follow normal distribution. You have seen that it is easy to make probabilistic predictions using the normal distribution. \n","\n","Let's plot the distribution of the `chol` column."]},{"cell_type":"code","metadata":{"id":"l8AXn58-k_O9","colab":{"base_uri":"https://localhost:8080/","height":320},"executionInfo":{"status":"ok","timestamp":1622616343505,"user_tz":-330,"elapsed":389,"user":{"displayName":"Arhan Singhal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg4PdbuZAsAVBem9gfXxGllkTugQRSsMItz_luU=s64","userId":"10909470486853968911"}},"outputId":"575406ca-c9d0-438a-c647-99df17b180ec"},"source":["# S2.2: Create a histogram for all the observations in the 'chol' column. \n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","import numpy as np\n","\n","plt.figure(figsize = (15,5))\n","plt.hist(sc,bins = 'sturges')\n","plt.axvline(sc.mean(), color = 'red', label = sc.mean())\n","plt.legend()\n","plt.show()\n","\n"],"execution_count":6,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1080x360 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"2-9pWOeSnsab"},"source":["We can see that the vertical red line which indicates the mean of data is almost at the centre of  distribution. It is not exactly a normal distribution but close to it. The mean of population here is $246.264$ approx. The population mean is denoted as $\\mu$. Thus, $\\mu = 246.264$\n","\n"]},{"cell_type":"markdown","metadata":{"id":"j8pd_qHxtgtu"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"N6Rxqc5aoV2X"},"source":["#### Activity 3: Distribution of Means of Samples\n","\n","Let's draw 300 samples from the `chol` columns each having 30 observations from the `chol` column and compute their means. Then let's create a histogram for the means of 300 samples."]},{"cell_type":"code","metadata":{"id":"_rav_4fcO3pN","colab":{"base_uri":"https://localhost:8080/","height":320},"executionInfo":{"status":"ok","timestamp":1622616633170,"user_tz":-330,"elapsed":1187,"user":{"displayName":"Arhan Singhal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg4PdbuZAsAVBem9gfXxGllkTugQRSsMItz_luU=s64","userId":"10909470486853968911"}},"outputId":"386f2c83-b6ec-4119-cbcb-53110a0eb923"},"source":["# T3.1: Draw 300 samples from the 'chol' column each having 30 observations, compute their means and create a histogram for the means of samples.\n","el = []\n","n = 300\n","for i in range(300):\n","  el.append(sc.sample(n = 30).mean())\n","\n","plt.figure(figsize = (15,5))\n","plt.hist(el,bins = 'sturges')\n","plt.axvline(np.mean(el), color = 'red', label = np.mean(el))\n","plt.legend()\n","plt.show()"],"execution_count":8,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1080x360 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"KY8RUpcogKCP"},"source":["In the above code: \n","\n","1. We created an empty list to store the means of 300 samples.\n","\n","2. Using the `sample()` function, we took 300 samples from the `chol` column each having 30 different cholesterol observations.\n","\n","3. Using the `mean()` function, we calculated the mean for each sample containing 30 cholesterol values.\n","\n","4. Using the `append()` function, we added each sample mean to the `mean_list`\n","\n","5. We created a histogram for all the 300 means of 300 different samples.\n","\n","6. The mean of all the sample means turn out to be approx 246 which is close to the mean of all the values in the `chol` column. This is very important observation\n","\n","*If we take several samples of a dataset (or population) such that each sample contains sufficient number of observations, then the means of all the sample means will be very close or nearly equal to the population mean*\n","\n","This is called **Central Limit Theorem (CLT)**. Also, the means of all the samples follow normal distribution (or bell curve). However, the following two factors must be satisfied:\n","\n","*   For an accurate normal distribution, the sample sizes should be large.\n","\n","*   The more closely the original population resembles a normal distribution, less sample size will be required. In our case the original shape of the distribution for the `chol` column was almost normal. Hence the sample size of 30 was good enough. However, if the original population is not normal (may be badly skewed, has multiple peaks, or has many outliers), sample size must be larger than 30.\n","\n","Let's again take 300 samples and observe the distributions for the means of different samples each having sample sizes $n = 500, 1000, 10000$\n","\n","**Note:** The `chol` column has exactly 303 values. So, to create a sample of 500 values, we have to provide another input `True` which is a value to the `replace` parameter inside the `sample()` function.\n","\n","**Syntax:** `sample(n = num_of_samples, replace = True)`\n","\n","`replace = True` denotes that repeat the values from the `chol` column (population in general).\n","\n","\n"]},{"cell_type":"code","metadata":{"id":"W_SVNCx_Hveo","colab":{"base_uri":"https://localhost:8080/","height":458},"executionInfo":{"status":"ok","timestamp":1622617246917,"user_tz":-330,"elapsed":1332,"user":{"displayName":"Arhan Singhal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg4PdbuZAsAVBem9gfXxGllkTugQRSsMItz_luU=s64","userId":"10909470486853968911"}},"outputId":"21bc2cc5-2ca5-4aae-e565-d98b6e922217"},"source":["# S3.1: Create histogram for the means of the samples of the sizes 500, 1000, 10000.\n","e1 = []\n","e2 = []\n","e3 = []\n","n = 300\n","for i in range(300):\n","  e1.append(sc.sample(n = 500, replace = True).mean())\n","  e2.append(sc.sample(n = 1000, replace = True).mean())\n","  e3.append(sc.sample(n = 10000, replace = True).mean())\n","plt.figure(figsize = (15,5))\n","sns.distplot(e1,bins = 'sturges', hist = False, label = '500')\n","sns.distplot(e2,bins = 'sturges', hist = False, label = '1000')\n","sns.distplot(e3,bins = 'sturges', hist = False, label = '10000')\n","\n","plt.axvline(sc.mean(), color = 'red', label = sc.mean())\n","plt.legend()\n","plt.show()\n","print(np.mean(e1), np.mean(e2), np.mean(e3))"],"execution_count":10,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/seaborn/distributions.py:2557: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `kdeplot` (an axes-level function for kernel density plots).\n","  warnings.warn(msg, FutureWarning)\n","/usr/local/lib/python3.7/dist-packages/seaborn/distributions.py:2557: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `kdeplot` (an axes-level function for kernel density plots).\n","  warnings.warn(msg, FutureWarning)\n","/usr/local/lib/python3.7/dist-packages/seaborn/distributions.py:2557: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `kdeplot` (an axes-level function for kernel density plots).\n","  warnings.warn(msg, FutureWarning)\n"],"name":"stderr"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1080x360 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"stream","text":["246.22935999999996 246.20786666666672 246.26569166666664\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"1qcy7zQZSO3x"},"source":["You may notice that as the sample size increases, the distribution of means of all the samples tends to look more and more like a normal distribution and groups more closely around the population mean (shown by the red vertical line).\n","\n","Try to draw a sample having more than 303 values using the `sample()` function with passing `replace = False` as an input.\n","\n","**Note:** You should get `ValueError` with the following message:\n","\n","```\n","ValueError: Cannot take a larger sample than population when 'replace=False'\n","```\n","\n","\n"]},{"cell_type":"code","metadata":{"id":"q4qIBiV9pWdx","colab":{"base_uri":"https://localhost:8080/","height":380},"executionInfo":{"status":"error","timestamp":1622617324099,"user_tz":-330,"elapsed":348,"user":{"displayName":"Arhan Singhal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg4PdbuZAsAVBem9gfXxGllkTugQRSsMItz_luU=s64","userId":"10909470486853968911"}},"outputId":"454dd76b-3d1e-458b-c277-b7bd673728e5"},"source":["# S3.2: Draw a sample having more than 303 values using the 'sample()' function with passing replace = False as an input.\n","for i in range(300):\n","  e1.append(sc.sample(n = 500, replace = False).mean())\n","  e2.append(sc.sample(n = 1000, replace = False).mean())\n","  e3.append(sc.sample(n = 10000, replace = False).mean())\n","plt.figure(figsize = (15,5))\n","sns.distplot(e1,bins = 'sturges', hist = False, label = '500')\n","sns.distplot(e2,bins = 'sturges', hist = False, label = '1000')\n","sns.distplot(e3,bins = 'sturges', hist = False, label = '10000')\n","\n","plt.axvline(sc.mean(), color = 'red', label = sc.mean())\n","plt.legend()\n","plt.show()\n","print(np.mean(e1), np.mean(e2), np.mean(e3))"],"execution_count":11,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-11-d8a8cdea208b>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# S3.2: Draw a sample having more than 303 values using the 'sample()' function with passing replace = False as an input.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m300\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m   \u001b[0me1\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msample\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m500\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreplace\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmean\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m   \u001b[0me2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msample\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m1000\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreplace\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmean\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m   \u001b[0me3\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msample\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m10000\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreplace\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmean\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36msample\u001b[0;34m(self, n, frac, replace, weights, random_state, axis)\u001b[0m\n\u001b[1;32m   4993\u001b[0m             )\n\u001b[1;32m   4994\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4995\u001b[0;31m         \u001b[0mlocs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mrs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mchoice\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0maxis_length\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mn\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreplace\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mreplace\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mp\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mweights\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4996\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtake\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlocs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4997\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32mmtrand.pyx\u001b[0m in \u001b[0;36mnumpy.random.mtrand.RandomState.choice\u001b[0;34m()\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: Cannot take a larger sample than population when 'replace=False'"]}]},{"cell_type":"markdown","metadata":{"id":"DMyYBfl6o_t3"},"source":["Let's see what happens when the sample size of all the samples is very small.\n"]},{"cell_type":"code","metadata":{"id":"1qTxg3LrbMjL","colab":{"base_uri":"https://localhost:8080/","height":320},"executionInfo":{"status":"ok","timestamp":1622617507309,"user_tz":-330,"elapsed":1202,"user":{"displayName":"Arhan Singhal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg4PdbuZAsAVBem9gfXxGllkTugQRSsMItz_luU=s64","userId":"10909470486853968911"}},"outputId":"41e1fec2-4683-4f04-d7a5-a90efff75228"},"source":["# S3.3: Take 300 samples each having 2 observations, calculate their means and create the histogram for means of all the samples. \n","for i in range(300):\n","  e1.append(sc.sample(n = 2, replace = False).mean())\n","\n","plt.figure(figsize = (15,5))\n","#sns.distplot(e1,bins = 'sturges', hist = True, label = '500')\n","plt.hist(el, bins = 'sturges')\n","\n","plt.axvline(np.mean(e1), color = 'red', label = np.mean(e1))\n","plt.legend()\n","plt.show()\n"],"execution_count":15,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1080x360 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"FbNUflQEkcKz"},"source":["Here you can notice that even when the sample size is very small, i.e., $n = 2$, the distribution of the mean of samples is normal. This is because the population (`chol` column ) follows normal distribution approximately."]},{"cell_type":"markdown","metadata":{"id":"xvj0rNd0D6fZ"},"source":["---"]}]}