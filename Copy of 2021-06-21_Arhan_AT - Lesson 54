{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Copy of 2021-06-21_Arhan_AT - Lesson 54","provenance":[{"file_id":"1DP2A4qkgu7PIPO5D0gdDFDTJfwyHO9Cd","timestamp":1624301149363},{"file_id":"1dG98146Y4hTrGlXd5C0_4vfQRi-VyiGI","timestamp":1624257375549}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"wXOH90ddtwL2"},"source":["# Lesson 54: OOP - Encapsulation\n"]},{"cell_type":"markdown","metadata":{"id":"GKxriZHwm33R"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"GbhgAn5kfd-K"},"source":["### Teacher-Student Activities\n","\n","In this class, we will learn about **Multi-level Inheritance** and an another concept of OOP called **Encapsulation**.\n","\n","Let's have a quick recap of what we did in the last class .\n"]},{"cell_type":"markdown","metadata":{"id":"DP-8XrZ_i2yZ"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"DoShzic97iBl"},"source":["#### Recap\n","\n","In the previous lesson, we created a parent class `Person` and a child class `Student` using **single-level inheritance**.\n"]},{"cell_type":"code","metadata":{"id":"K_ry2pvE8Amu"},"source":["# Create the class 'Person' as the parent class\n","class Person:\n","  def __init__(self, name, age, gender):\n","    self.name = name\n","    self.age = age\n","    self.gender = gender\n","\n","\n","# Create the 'Student' class as the child class of 'Person'.\n","class Student(Person):\n","  def __init__(self, name, age, gender, grade, class_teacher, school_fee):\n","    Person.__init__(self, name, age, gender) \n","    self.grade = grade\n","    self.class_teacher = class_teacher\n","    self.school_fee = school_fee\n","\n","  def increase_school_fee(self):\n","    self.school_fee = self.school_fee * 1.05\n","    return self.school_fee\n","    "],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"0giy1f829IqA"},"source":["We know that we can inherit the properties of a parent class in a child class using Single-level Inheritance. \n","Letâ€™s see how we can make a child class of a child class using **Multi-level Inheritance.**"]},{"cell_type":"markdown","metadata":{"id":"PmWt3O-WNj2x"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"HQS14ccHeKlU"},"source":["#### Activity 1: Multi-level Inheritance^^^\n","\n","Multi-level inheritance means that a child class also has its own child class. Since the inheritance extends one level beyond, it is called **multi-level inheritance**. \n","\n","Because of multi-level inheritance, you could say the new child class is a grandchild class of the parent class.\n","\n","The grandchild class will also be able to inherit the properties of the parent class because the child class inherits the properties of the parent class.\n","\n","Let's understand this concept by creating `Alumni` class which inherits all the properties of the `Student` class except for the `school_fee` property. It also has a new property called graduation year (`grad_year`) to specify the year of graduation or transfer from the school.\n"]},{"cell_type":"code","metadata":{"id":"K8-IC8xldDUK"},"source":["# S1.1: Create the 'Alumni' class.\n","class Alumni(Student):\n","  def __init__(self, name, age, gender, grade, class_teacher,grad_yr):\n","    super().__init__(name, age, gender, grade, class_teacher, school_fee = None)\n","    self.grad_yr = grad_yr\n","  \n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"96cTKHu_7P-L"},"source":["After creating the grandchild class, let's create an object of the `Alumni` class to see if we can access the properties of the child class, i.e., `Student` and parent class, i.e., `Person`."]},{"cell_type":"code","metadata":{"id":"2dUkLpRKlx9L","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1624258064764,"user_tz":-330,"elapsed":3,"user":{"displayName":"Arhan Singhal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg4PdbuZAsAVBem9gfXxGllkTugQRSsMItz_luU=s64","userId":"10909470486853968911"}},"outputId":"5e4ad7ba-8ef0-4caa-c6b8-a03bcdeb4cd1"},"source":["# S1.2: Create an object of the 'Student' class and retrieve all the 'Student' class attributes.\n","a1 = Alumni('abc',10,'male','10','xyz',2020)\n","print(a1.name, a1.grade, a1.grad_yr)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["abc 10 2020\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"OlVDMS2J-brI"},"source":["As you can see, the object can be used to initialise and retrieve the variables of all the classes inherited sequentially.\n","\n","In this way, we can create any level of the hierarchy to make our code modular and be able to reuse the code created earlier.\n","\n","Now, let's try to make our varibles secure using encapsulation.\n","In encapsulation, we hide the instance (or object) variables and methods. In other words, we make them private so that their values can neither be accessed nor be modified through the direct reference.\n","\n"]},{"cell_type":"markdown","metadata":{"id":"rScFyGaSOM2K"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"y-W-e6w93oNS"},"source":["#### Activity 2: The `BankAccount` Class\n","\n","Let's create a class called `BankAccount` having the following attributes and methods:\n","\n","**Attributes:**\n","\n","1. Name of the account holder in a bank\n","\n","2. Account number of that account holder\n","\n","3. Current available amount (or balance) in the account\n","\n","**Methods:**\n","\n","1. A function to increase the current balance upon deposit of some additional amount.\n","\n","2. A function to decrease the current balance upon withdrawal of some amount.\n","\n"]},{"cell_type":"code","metadata":{"id":"u9b5Les9i3gi"},"source":["# S2.1: Create the 'BankAccount' class as specified above.\n","class BankAccount:\n","  def __init__(self,name,acc,bal):\n","    self.name = name\n","    self.acc = acc\n","    self.bal = bal\n","  def withdraw(self,wth_amt):\n","    if wth_amt>self.bal:\n","      return \"Account balance insufficient\"\n","    else:\n","      self.bal = self.bal - wth_amt\n","      return \"Withdrawal successful, Amount left = \" + str(self.bal)\n","  def add(self, deposit):\n","    self.bal = self.bal + deposit\n","    return \"Deposit successful. Current balance in account = \" + str(self.bal)\n","    \n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"A2GWB85RrsHk"},"source":["Now, let's create an object of the `BankAccount` class to test whether it is working correctly or not."]},{"cell_type":"code","metadata":{"id":"RQwLf-qJjvBf"},"source":["# S2.2: Create an object of the 'BankAccount' class and retrieve all of its attributes.\n","acc1 = BankAccount('Arhan',12345,500)\n","\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"CYNlVtENN2Bs","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1624258732571,"user_tz":-330,"elapsed":390,"user":{"displayName":"Arhan Singhal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg4PdbuZAsAVBem9gfXxGllkTugQRSsMItz_luU=s64","userId":"10909470486853968911"}},"outputId":"36ec7341-be46-4d75-9bcc-63a5f1bcb3f6"},"source":["# S2.3: Now add some amount, say 55000, to the 'BankAccount' object created above.\n","acc1.add(55000)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'Deposit successful. Current balance in account = 55500'"]},"metadata":{"tags":[]},"execution_count":13}]},{"cell_type":"markdown","metadata":{"id":"Pwe0kDhWOJ_o"},"source":["Similarly, you can also withdraw some amount from the bank account."]},{"cell_type":"code","metadata":{"id":"bhAwqz0sj4QW","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1624258759084,"user_tz":-330,"elapsed":381,"user":{"displayName":"Arhan Singhal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg4PdbuZAsAVBem9gfXxGllkTugQRSsMItz_luU=s64","userId":"10909470486853968911"}},"outputId":"0f0f8d16-3d2d-40f2-8e24-53ce73cafb01"},"source":["# S2.4: Now withdraw some amount, say 50000, from the 'BankAccount' object created above.\n","acc1.withdraw(50000)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'Withdrawal successful, Amount left = 5500'"]},"metadata":{"tags":[]},"execution_count":14}]},{"cell_type":"markdown","metadata":{"id":"PMCGHA8pfcqL"},"source":["---"]},{"cell_type":"code","metadata":{"id":"s2s95v3xX79R"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"zhj3DBPhgtwe"},"source":["#### Activity 3: Encapsulation\n","\n","\n","**What is Encapsulation?**\n","\n","Encapsulation is the process of hiding the variables and methods of an instance of a class in such a way that their values cannot be accessed directly by calling the attributes using the dot operator. It serves as an additional layer of security to the data of an individual object.\n","\n","Let's understand it better with the help of a new object called `millionaire` of the `BankAccount` class.\n","\n","In the current version of the `BankAccount` class, all the three attributes, i.e., account number, name and balance can easily be changed (or modified) using the assignment operator (`=`). Imagine someone having $100 million in their account getting their money transferred to some other person."]},{"cell_type":"code","metadata":{"id":"LEbo4whshb_8","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1624258916128,"user_tz":-330,"elapsed":377,"user":{"displayName":"Arhan Singhal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg4PdbuZAsAVBem9gfXxGllkTugQRSsMItz_luU=s64","userId":"10909470486853968911"}},"outputId":"dee0202b-90ff-4751-c2c3-38f5251ca1cc"},"source":["# S3.1: Create a new 'BankAccount' object called 'millionaire' with a balance of 100 million.\n","acc2 = BankAccount('abc',100,1000)\n","\n","print(acc2.name,acc2.acc,acc2.bal)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["abc 100 1000\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"6ddpChszh0RZ"},"source":["You easily change the current account holder name to your name and just like that you can become a millionaire."]},{"cell_type":"code","metadata":{"id":"MLOxH785h77P","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1624258956859,"user_tz":-330,"elapsed":418,"user":{"displayName":"Arhan Singhal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg4PdbuZAsAVBem9gfXxGllkTugQRSsMItz_luU=s64","userId":"10909470486853968911"}},"outputId":"af3893ba-f93b-4743-dd4b-725b5c046c24"},"source":["# S3.2: Change the account holder name using the assignment operator ('=').\n","acc2.name = 'xyz'\n","print(acc2.name,acc2.acc,acc2.bal)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["xyz 100 1000\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"oMbZrnaviI0F"},"source":["As you can see, the original account holder's name is changed to a new name. To protect the account of the original account holder from such modifications, we can use encapsulation.\n","\n","**General need for encapsulation:** \n","\n","In many areas such as banking, it is very important that such changes or modifications are restricted by making attributes private. We must create private variables and methods for the object of a class to protect them from any kind of change or modifications outside the class. \n","\n","**How to define private variables?**\n","\n","To create a private instance variable or an instance method, simply put two underscore symbols (`__`) before a variable name or a function name as a prefix.\n","\n","**Syntax:** `__attributeName` or `__methodName`\n","\n","Let's create the `BankAccount` class again having the private instance variables. Let's try to access and change them from outside the class."]},{"cell_type":"code","metadata":{"id":"xgCTgGw2iuIQ"},"source":["# S3.3: Create the 'BankAccount' class again with the private attributes.\n","class BankAccount:\n","  def __init__(self,name,acc,bal):\n","    self.__name = name\n","    self.__acc = acc\n","    self.__bal = bal\n","  def withdraw(self,wth_amt):\n","    if wth_amt>self.__bal:\n","      return \"Account balance insufficient\"\n","    else:\n","      self.__bal = self.__bal - wth_amt\n","      return \"Withdrawal successful, Amount left = \" + str(self.__bal)\n","  def add(self, deposit):\n","    self.__bal = self.__bal + deposit\n","    return \"Deposit successful. Current balance in account = \" + str(self.__bal)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"gP_a8iIalapd"},"source":["Now let's create a new `BankAccount` object with the account holder having 100 million dollars. Also, try to get the balance amount through the direct reference.\n","\n","**Note:** Referencing the value of a private attribute directly will throw `AttributeError`."]},{"cell_type":"code","metadata":{"id":"_SyY-5_hi6ZG"},"source":["# S3.4: Create the 'millionaire' object again and try to retrieve any of the attribute values.\n","acc3 = BankAccount('acb',100,1000)\n","\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"uMaF-s0aB0LJ"},"source":["As we can clearly see that the `__balance` variable is not accessible from the object directly (or outside of the `BankAccount` class) because of the presence of double underscores (__). \n","\n","Now let's learn how to access the private attribute values outside the class."]},{"cell_type":"markdown","metadata":{"id":"6fUcCF7q4h4S"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"a0Xu6EXQlzl8"},"source":["#### Activity 4: Getter Functions\n","\n","Now that we have hidden or made the attributes private, we still want to get their values. To do this, we can create a **getter** function.\n","\n","A getter function is also known as an accessor. It is used to print the current value of a private variable. The recommended syntax is:\n","\n","```\n","def get_variable_name(self):            \n","  return self.__variable_name\n","```\n","\n","Let's create **getter** functions to get the account holder name, number and balance values outside the class.\n","\n","**Note:** The getter functions should always return a value."]},{"cell_type":"code","metadata":{"id":"0YpDSQ02i9gb"},"source":["# S4.1: Add the getter methods (or functions) in the 'BankAccount' class to get account holder name, number and balance.\n","class BankAccount:\n","  def __init__(self,name,acc,bal):\n","    self.__name = name\n","    self.__acc = acc\n","    self.__bal = bal\n","  def get_acc_name(self):\n","    return self.__name\n","  def get_acc_number(self):\n","    return self.__acc\n","  def get_balance(self):\n","    return self.__bal\n","\n","\n","\n","  def withdraw(self,wth_amt):\n","    if wth_amt>self.__bal:\n","      return \"Account balance insufficient\"\n","    else:\n","      self.__bal = self.__bal - wth_amt\n","      return \"Withdrawal successful, Amount left = \" + str(self.__bal)\n","  def add(self, deposit):\n","    self.__bal = self.__bal + deposit\n","    return \"Deposit successful. Current balance in account = \" + str(self.__bal)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"daXB7VgR5M9U"},"source":["Now let's create a new `BankAccount` object and try to get the values of the hidden attributes using the getter functions."]},{"cell_type":"code","metadata":{"id":"EFsAkquYjGsj","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1624259514765,"user_tz":-330,"elapsed":374,"user":{"displayName":"Arhan Singhal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg4PdbuZAsAVBem9gfXxGllkTugQRSsMItz_luU=s64","userId":"10909470486853968911"}},"outputId":"bd49eb61-50f3-4530-a22b-54f92786504f"},"source":["# S4.2: Create the 'millionaire' object again and try to retrieve any of the attribute values using the getter method(s).\n","acc2 = BankAccount('abc',100,1000)\n","\n","print(acc2.get_acc_name(),acc2.get_acc_number(), acc2.get_balance())"],"execution_count":null,"outputs":[{"output_type":"stream","text":["abc 100 1000\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"fSS6bbZNkjUi"},"source":["This time you could get the values of the hidden (or private) attributes. So this process of **restricting access to the instance attributes** through the direct reference is called encapsulation.\n","\n","You can also hide the `withdraw_money()` method so that nobody can withdraw an amount outside the class. Let's first withdraw an amount of say $500,000 from Jeff Bezos' account."]},{"cell_type":"code","metadata":{"id":"D_XXMcZ0xGkr","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1624259558364,"user_tz":-330,"elapsed":428,"user":{"displayName":"Arhan Singhal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg4PdbuZAsAVBem9gfXxGllkTugQRSsMItz_luU=s64","userId":"10909470486853968911"}},"outputId":"03c60a1e-141f-447c-f84b-f28cf558afde"},"source":["# S4.3: Withdraw an amount of say $500,000 from Jeff Bezos' account.\n","acc2.withdraw(100)\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'Withdrawal successful, Amount left = 900'"]},"metadata":{"tags":[]},"execution_count":26}]},{"cell_type":"markdown","metadata":{"id":"m6vG5oDVxiLA"},"source":["Now, hide the `withdraw_money()` function."]},{"cell_type":"code","metadata":{"id":"Swhpns-TxBSB"},"source":["# S4.4: Hide the 'withdraw_money()' function.\n","class BankAccount:\n","  def __init__(self,name,acc,bal):\n","    self.__name = name\n","    self.__acc = acc\n","    self.__bal = bal\n","  def get_acc_name(self):\n","    return self.__name\n","  def get_acc_number(self):\n","    return self.__acc\n","  def get_balance(self):\n","    return self.__bal\n","\n","\n","\n","  def __withdraw(self,wth_amt):\n","    if wth_amt>self.__bal:\n","      return \"Account balance insufficient\"\n","    else:\n","      self.__bal = self.__bal - wth_amt\n","      return \"Withdrawal successful, Amount left = \" + str(self.__bal)\n","  def add(self, deposit):\n","    self.__bal = self.__bal + deposit\n","    return \"Deposit successful. Current balance in account = \" + str(self.__bal)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"v6bSExyexzLS"},"source":["Now try to withdraw an amount of $1 million using the `withdraw_money()` function.\n","\n","**Note:** The code below should throw `AttributeError`."]},{"cell_type":"code","metadata":{"id":"VWAXwijuxEdl","colab":{"base_uri":"https://localhost:8080/","height":203},"executionInfo":{"status":"error","timestamp":1624259627161,"user_tz":-330,"elapsed":380,"user":{"displayName":"Arhan Singhal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg4PdbuZAsAVBem9gfXxGllkTugQRSsMItz_luU=s64","userId":"10909470486853968911"}},"outputId":"8b70af03-59f2-4e97-e48b-b43ee26d1a15"},"source":["# S4.5: Create the 'millionaire' object again and try to withdraw an amount of $1 million using the withdraw_money() function.\n","acc2 = BankAccount('abc',100,1000)\n","acc2.withdraw(100)"],"execution_count":null,"outputs":[{"output_type":"error","ename":"AttributeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-28-4bfc58e6d920>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# S4.5: Create the 'millionaire' object again and try to withdraw an amount of $1 million using the withdraw_money() function.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0macc2\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mBankAccount\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'abc'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m100\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1000\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0macc2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwithdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m100\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mAttributeError\u001b[0m: 'BankAccount' object has no attribute 'withdraw'"]}]},{"cell_type":"markdown","metadata":{"id":"xI1Jl6JxyWOK"},"source":["As you can see, now you can't even withdraw money because the `withdraw_money()` function is now a private function.\n","\n","Let's stop here. We will continue to learn encapsulation in the next class."]},{"cell_type":"markdown","metadata":{"id":"4gGG3CmJ6ado"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"nwmU1uuS1Ybq"},"source":["#### Activity 1: The `SavingAccount` Class\n","\n","Create a new class `SavingAccount` which inherits from the parent class `BankAccount` and has the following additional private attributes and methods:\n","\n","**Additional Attributes:**\n","\n","1. Branch Name\n","\n","2. Customer ID \n","\n","3. Nominee Name\n","\n","**Method(s):**\n","\n","1. A function to determine the rate of interest. For this, you need to the check balance amount. If saving account balance is above 1 lakh, then the rate of interest is 2.70 % else no interest will be charged.\n","\n","2. Also, add getter functions for each of the private variables to print their value outside the class.\n","\n","\n"]},{"cell_type":"code","metadata":{"id":"YaDj8s5EbFoe","colab":{"base_uri":"https://localhost:8080/","height":53},"executionInfo":{"status":"ok","timestamp":1624260639223,"user_tz":-330,"elapsed":382,"user":{"displayName":"Arhan Singhal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg4PdbuZAsAVBem9gfXxGllkTugQRSsMItz_luU=s64","userId":"10909470486853968911"}},"outputId":"95520096-7acc-4eb4-ab81-a4d1f9274113"},"source":["class SavingAccount(BankAccount):\n","  def __init__(self,name,acc,bal,branch,cust_id,nom):\n","    super().__init__(name,acc,bal)\n","    self.__branch = branch\n","    self.__cust_id = cust_id\n","    self.__nom = nom\n","  def get_branch(self):\n","    return self.__branch\n","  def get_cust_id(self):\n","    return self.__cust_id\n","  def get_nom(self):\n","    return self.__nom\n","  def interest(self):\n","    if self.get_balance() > 100000:\n","      return \"The rate of interest is 2.70%\"\n","    else:\n","      return \"No interest\"\n","n\n","accA = SavingAccount('Arhan',28832,10**5,'Delhi','sh38vjaj3','Naysa')\n","accB = SavingAccount('Arhan',28832,11**5,'Delhi','sh38vjaj3','Naysa')\n","\n","print(accB.get_acc_name(), accB.get_balance(),accB.get_cust_id())\n","\n","accB.interest()\n","  "],"execution_count":33,"outputs":[{"output_type":"stream","text":["Arhan 161051 sh38vjaj3\n"],"name":"stdout"},{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'The rate of interest is 2.70%'"]},"metadata":{"tags":[]},"execution_count":33}]}]}