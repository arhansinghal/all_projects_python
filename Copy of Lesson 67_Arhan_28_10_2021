{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Copy of Lesson 67_Arhan_28/10/2021","provenance":[{"file_id":"1LbP58o4qFTL1ItfvdllPM51GlPUha4B4","timestamp":1635665289573},{"file_id":"1UJhhAdfqaJNGDy_HZa-42rco3Cs81dba","timestamp":1635413905370}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"cN_oEsXfM_LV"},"source":["# Lesson 67: Car Price Prediction - Data Exploration"]},{"cell_type":"markdown","metadata":{"id":"gFjOAv8nAhzQ"},"source":["### Teacher-Student Activities\n","\n","In the last class, you learn to calculate variance inflation factor to detect multicollinearity in a linear regression model. You also learnt that it is one of the ways to select features or eliminate features. Also, in the previous class, you concluded that the linear regression algorithm could not accurately predict the relative humdity values from the temperature and ozone values. \n","\n","In this class, we will solve another problem statement which is to predict prices of cars based on their technical specifications such as engine capacity, brand etc. To solve this problem, we will use linear regression and find out how well it predicts prices of cars_df.\n","\n","Let's look at the problem statement in detail."]},{"cell_type":"markdown","metadata":{"id":"7rqO31eQB5O-"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"f-uhY3ryaj4N"},"source":["### Problem Statement\n","\n","You need to build a linear regression model to predict prices of cars based on its technical specifications such as car manufacturer, its engine capacity, fuel efficiency, body-type etc.\n","\n","**Dataset Description:**\n","\n","The dataset contains 205 rows and 26 columns. Each column represents an attribute of a car as described in the table below.\n","\n","|Sr No.|Attribute|Attribute Information|\n","|-|-|-|\n","|1|Car_ID|Unique id of each car (Interger)|\t\t\n","|2|Symboling|Assigned insurance risk rating; a value of +3 indicates that the car is risky; -3 suggests that it is probably a safe car (Categorical)|\n","|3|carCompany|Name of car company (Categorical)|\n","|4|fueltype| fuel-type i.e. petrol or diesel (Categorical)|\t\n","|5|aspiration|Aspiration used in a car (Categorical)|\t\t\n","|6|doornumber|Number of doors in a car (Categorical)|\t\t\n","|7|carbody|Body-type of a car (Categorical)|\n","|8|drivewheel|Type of drive wheel (Categorical)|\n","|9|enginelocation|Location of car engine (Categorical)|\n","|10|wheelbase|Weelbase of car (Numeric)|\t\t\n","|11|carlength|Length of car (Numeric)|\t\t\n","|12|carwidth|Width of car (Numeric)|\n","|13|carheight|Height of car (Numeric)|\n","|14|curbweight|The weight of a car without occupants or baggage (Numeric)|\n","|15|enginetype|Type of engine (Categorical)|\n","|16|cylindernumber|Number of cylinders placed in the car engine (Categorical)||17|enginesize|Capacity of an engine (Numeric)|\n","|18|fuelsystem|Fuel system of a car (Categorical)|\n","|19|boreratio|Bore ratio of car (Numeric)|\n","|20|stroke|Stroke or volume inside the engine (Numeric)|\n","|21|compressionratio|Compression ratio of an engine (Numeric)|\n","|22|horsepower|Power output of an engine (Numeric)|\t\t\n","|23|peakrpm|Peak revolutions per minute (Numeric)|\n","|24|citympg|Mileage in city (Numeric)|\n","|25|highwaympg|Mileage on highway (Numeric)|\n","|26|price(Dependent variable)|Price of a car (Numeric)|\t\n","\n","This data set consists of three types of entities: \n","\n","- the specification of an auto in terms of various characteristics, \n","\n","- its assigned insurance risk rating, \n","\n","- its normalised losses in use as compared to other cars. \n","\n","The second rating corresponds to the degree to which the auto is more risky than its price indicates. Cars are initially assigned a risk factor symbol associated with its price. Then, if it is more risky (or less), this symbol is adjusted by moving it up (or down) the scale. Actuarians call this process **symboling**. A value of $+3$ indicates that the auto is risky, $-3$ that it is probably pretty safe.\n","\n","The third factor is the relative average loss payment per insured vehicle year. This value is normalized for all autos within a particular size classification (two-door small, station wagons, sports/speciality etc.), and represents the average loss per car per year.\n","\n","**Note:** Several of the attributes in the database could be used as a \"class\" attribute.\n","\n","**Dataset source:** https://archive.ics.uci.edu/ml/datasets/Automobile\n","\n","\n","The above dataset consists of data taken from 1985 Ward's Automotive Yearbook. Here's the list of original sources of the data:\n","\n","1. 1985 Model Import Car and Truck Specifications, 1985 Ward's Automotive Yearbook.\n","\n","2. Personal Auto Manuals, Insurance Services Office, 160 Water Street, New York, NY 10038\n","\n","3. Insurance Collision Report, Insurance Institute for Highway Safety, Watergate 600, Washington, DC 20037\n","\n","\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"SZEA9P6hDG28"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"keVeYBHNDHh8"},"source":["#### Activity 1: Importing Modules & Reading Data\n","\n","Let's import the modules, read the data froma `csv` file to create a data frame and go through the necessary data-cleaning process (if required). Here's the link to the dataset:\n","\n","https://s3-student-datasets-bucket.whjr.online/whitehat-ds-datasets/car-prices.csv"]},{"cell_type":"code","metadata":{"id":"5f2emlnJM56A","colab":{"base_uri":"https://localhost:8080/","height":272},"executionInfo":{"status":"ok","timestamp":1635414156292,"user_tz":-330,"elapsed":1935,"user":{"displayName":"Arhan Singhal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg4PdbuZAsAVBem9gfXxGllkTugQRSsMItz_luU=s64","userId":"10909470486853968911"}},"outputId":"86958deb-3e6f-4fbb-83c6-8092f663b7a2"},"source":["# S1.1: Import the modules, read the dataset and create a Pandas DataFrame.\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","import seaborn as sns \n","\n","df = pd.read_csv('https://s3-student-datasets-bucket.whjr.online/whitehat-ds-datasets/car-prices.csv')\n","df.head()"],"execution_count":1,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>car_ID</th>\n","      <th>symboling</th>\n","      <th>CarName</th>\n","      <th>fueltype</th>\n","      <th>aspiration</th>\n","      <th>doornumber</th>\n","      <th>carbody</th>\n","      <th>drivewheel</th>\n","      <th>enginelocation</th>\n","      <th>wheelbase</th>\n","      <th>carlength</th>\n","      <th>carwidth</th>\n","      <th>carheight</th>\n","      <th>curbweight</th>\n","      <th>enginetype</th>\n","      <th>cylindernumber</th>\n","      <th>enginesize</th>\n","      <th>fuelsystem</th>\n","      <th>boreratio</th>\n","      <th>stroke</th>\n","      <th>compressionratio</th>\n","      <th>horsepower</th>\n","      <th>peakrpm</th>\n","      <th>citympg</th>\n","      <th>highwaympg</th>\n","      <th>price</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>alfa-romero giulia</td>\n","      <td>gas</td>\n","      <td>std</td>\n","      <td>two</td>\n","      <td>convertible</td>\n","      <td>rwd</td>\n","      <td>front</td>\n","      <td>88.6</td>\n","      <td>168.8</td>\n","      <td>64.1</td>\n","      <td>48.8</td>\n","      <td>2548</td>\n","      <td>dohc</td>\n","      <td>four</td>\n","      <td>130</td>\n","      <td>mpfi</td>\n","      <td>3.47</td>\n","      <td>2.68</td>\n","      <td>9.0</td>\n","      <td>111</td>\n","      <td>5000</td>\n","      <td>21</td>\n","      <td>27</td>\n","      <td>13495.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>3</td>\n","      <td>alfa-romero stelvio</td>\n","      <td>gas</td>\n","      <td>std</td>\n","      <td>two</td>\n","      <td>convertible</td>\n","      <td>rwd</td>\n","      <td>front</td>\n","      <td>88.6</td>\n","      <td>168.8</td>\n","      <td>64.1</td>\n","      <td>48.8</td>\n","      <td>2548</td>\n","      <td>dohc</td>\n","      <td>four</td>\n","      <td>130</td>\n","      <td>mpfi</td>\n","      <td>3.47</td>\n","      <td>2.68</td>\n","      <td>9.0</td>\n","      <td>111</td>\n","      <td>5000</td>\n","      <td>21</td>\n","      <td>27</td>\n","      <td>16500.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>alfa-romero Quadrifoglio</td>\n","      <td>gas</td>\n","      <td>std</td>\n","      <td>two</td>\n","      <td>hatchback</td>\n","      <td>rwd</td>\n","      <td>front</td>\n","      <td>94.5</td>\n","      <td>171.2</td>\n","      <td>65.5</td>\n","      <td>52.4</td>\n","      <td>2823</td>\n","      <td>ohcv</td>\n","      <td>six</td>\n","      <td>152</td>\n","      <td>mpfi</td>\n","      <td>2.68</td>\n","      <td>3.47</td>\n","      <td>9.0</td>\n","      <td>154</td>\n","      <td>5000</td>\n","      <td>19</td>\n","      <td>26</td>\n","      <td>16500.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>2</td>\n","      <td>audi 100 ls</td>\n","      <td>gas</td>\n","      <td>std</td>\n","      <td>four</td>\n","      <td>sedan</td>\n","      <td>fwd</td>\n","      <td>front</td>\n","      <td>99.8</td>\n","      <td>176.6</td>\n","      <td>66.2</td>\n","      <td>54.3</td>\n","      <td>2337</td>\n","      <td>ohc</td>\n","      <td>four</td>\n","      <td>109</td>\n","      <td>mpfi</td>\n","      <td>3.19</td>\n","      <td>3.40</td>\n","      <td>10.0</td>\n","      <td>102</td>\n","      <td>5500</td>\n","      <td>24</td>\n","      <td>30</td>\n","      <td>13950.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>2</td>\n","      <td>audi 100ls</td>\n","      <td>gas</td>\n","      <td>std</td>\n","      <td>four</td>\n","      <td>sedan</td>\n","      <td>4wd</td>\n","      <td>front</td>\n","      <td>99.4</td>\n","      <td>176.6</td>\n","      <td>66.4</td>\n","      <td>54.3</td>\n","      <td>2824</td>\n","      <td>ohc</td>\n","      <td>five</td>\n","      <td>136</td>\n","      <td>mpfi</td>\n","      <td>3.19</td>\n","      <td>3.40</td>\n","      <td>8.0</td>\n","      <td>115</td>\n","      <td>5500</td>\n","      <td>18</td>\n","      <td>22</td>\n","      <td>17450.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   car_ID  symboling                   CarName  ... citympg highwaympg    price\n","0       1          3        alfa-romero giulia  ...      21         27  13495.0\n","1       2          3       alfa-romero stelvio  ...      21         27  16500.0\n","2       3          1  alfa-romero Quadrifoglio  ...      19         26  16500.0\n","3       4          2               audi 100 ls  ...      24         30  13950.0\n","4       5          2                audi 100ls  ...      18         22  17450.0\n","\n","[5 rows x 26 columns]"]},"metadata":{},"execution_count":1}]},{"cell_type":"code","metadata":{"id":"7SebX417NgFv","colab":{"base_uri":"https://localhost:8080/","height":272},"executionInfo":{"status":"ok","timestamp":1635414180310,"user_tz":-330,"elapsed":444,"user":{"displayName":"Arhan Singhal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg4PdbuZAsAVBem9gfXxGllkTugQRSsMItz_luU=s64","userId":"10909470486853968911"}},"outputId":"b8a76ea7-3abe-4a86-bb38-6433af722d7f"},"source":["# S1.2: Get the information on the dataset.\n","df.head()"],"execution_count":2,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>car_ID</th>\n","      <th>symboling</th>\n","      <th>CarName</th>\n","      <th>fueltype</th>\n","      <th>aspiration</th>\n","      <th>doornumber</th>\n","      <th>carbody</th>\n","      <th>drivewheel</th>\n","      <th>enginelocation</th>\n","      <th>wheelbase</th>\n","      <th>carlength</th>\n","      <th>carwidth</th>\n","      <th>carheight</th>\n","      <th>curbweight</th>\n","      <th>enginetype</th>\n","      <th>cylindernumber</th>\n","      <th>enginesize</th>\n","      <th>fuelsystem</th>\n","      <th>boreratio</th>\n","      <th>stroke</th>\n","      <th>compressionratio</th>\n","      <th>horsepower</th>\n","      <th>peakrpm</th>\n","      <th>citympg</th>\n","      <th>highwaympg</th>\n","      <th>price</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>alfa-romero giulia</td>\n","      <td>gas</td>\n","      <td>std</td>\n","      <td>two</td>\n","      <td>convertible</td>\n","      <td>rwd</td>\n","      <td>front</td>\n","      <td>88.6</td>\n","      <td>168.8</td>\n","      <td>64.1</td>\n","      <td>48.8</td>\n","      <td>2548</td>\n","      <td>dohc</td>\n","      <td>four</td>\n","      <td>130</td>\n","      <td>mpfi</td>\n","      <td>3.47</td>\n","      <td>2.68</td>\n","      <td>9.0</td>\n","      <td>111</td>\n","      <td>5000</td>\n","      <td>21</td>\n","      <td>27</td>\n","      <td>13495.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>3</td>\n","      <td>alfa-romero stelvio</td>\n","      <td>gas</td>\n","      <td>std</td>\n","      <td>two</td>\n","      <td>convertible</td>\n","      <td>rwd</td>\n","      <td>front</td>\n","      <td>88.6</td>\n","      <td>168.8</td>\n","      <td>64.1</td>\n","      <td>48.8</td>\n","      <td>2548</td>\n","      <td>dohc</td>\n","      <td>four</td>\n","      <td>130</td>\n","      <td>mpfi</td>\n","      <td>3.47</td>\n","      <td>2.68</td>\n","      <td>9.0</td>\n","      <td>111</td>\n","      <td>5000</td>\n","      <td>21</td>\n","      <td>27</td>\n","      <td>16500.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>alfa-romero Quadrifoglio</td>\n","      <td>gas</td>\n","      <td>std</td>\n","      <td>two</td>\n","      <td>hatchback</td>\n","      <td>rwd</td>\n","      <td>front</td>\n","      <td>94.5</td>\n","      <td>171.2</td>\n","      <td>65.5</td>\n","      <td>52.4</td>\n","      <td>2823</td>\n","      <td>ohcv</td>\n","      <td>six</td>\n","      <td>152</td>\n","      <td>mpfi</td>\n","      <td>2.68</td>\n","      <td>3.47</td>\n","      <td>9.0</td>\n","      <td>154</td>\n","      <td>5000</td>\n","      <td>19</td>\n","      <td>26</td>\n","      <td>16500.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>2</td>\n","      <td>audi 100 ls</td>\n","      <td>gas</td>\n","      <td>std</td>\n","      <td>four</td>\n","      <td>sedan</td>\n","      <td>fwd</td>\n","      <td>front</td>\n","      <td>99.8</td>\n","      <td>176.6</td>\n","      <td>66.2</td>\n","      <td>54.3</td>\n","      <td>2337</td>\n","      <td>ohc</td>\n","      <td>four</td>\n","      <td>109</td>\n","      <td>mpfi</td>\n","      <td>3.19</td>\n","      <td>3.40</td>\n","      <td>10.0</td>\n","      <td>102</td>\n","      <td>5500</td>\n","      <td>24</td>\n","      <td>30</td>\n","      <td>13950.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>2</td>\n","      <td>audi 100ls</td>\n","      <td>gas</td>\n","      <td>std</td>\n","      <td>four</td>\n","      <td>sedan</td>\n","      <td>4wd</td>\n","      <td>front</td>\n","      <td>99.4</td>\n","      <td>176.6</td>\n","      <td>66.4</td>\n","      <td>54.3</td>\n","      <td>2824</td>\n","      <td>ohc</td>\n","      <td>five</td>\n","      <td>136</td>\n","      <td>mpfi</td>\n","      <td>3.19</td>\n","      <td>3.40</td>\n","      <td>8.0</td>\n","      <td>115</td>\n","      <td>5500</td>\n","      <td>18</td>\n","      <td>22</td>\n","      <td>17450.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   car_ID  symboling                   CarName  ... citympg highwaympg    price\n","0       1          3        alfa-romero giulia  ...      21         27  13495.0\n","1       2          3       alfa-romero stelvio  ...      21         27  16500.0\n","2       3          1  alfa-romero Quadrifoglio  ...      19         26  16500.0\n","3       4          2               audi 100 ls  ...      24         30  13950.0\n","4       5          2                audi 100ls  ...      18         22  17450.0\n","\n","[5 rows x 26 columns]"]},"metadata":{},"execution_count":2}]},{"cell_type":"markdown","metadata":{"id":"tVyfHrZaS0Zw"},"source":["There are 0 missing or null values in the dataset. Also, a lot of features have non-numeric values. You need to utilise all of them to predict the prices of cars."]},{"cell_type":"markdown","metadata":{"id":"fZGfnN-mV6_a"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"Hy853LbgOVhi"},"source":["#### Activitiy 2: Data Cleaning^\n","\n","Let's clean the data. You need to extract the name of the manufacturer of a from the column `CarName`. Let's look at the first few rows of the `'CarName'` column to understand how the name of a car is reported in the dataset."]},{"cell_type":"code","metadata":{"id":"L0DQGjY_Objl","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1635414218607,"user_tz":-330,"elapsed":449,"user":{"displayName":"Arhan Singhal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg4PdbuZAsAVBem9gfXxGllkTugQRSsMItz_luU=s64","userId":"10909470486853968911"}},"outputId":"b860fb00-590d-4eb1-dbbe-65745fa4ea7b"},"source":["# S2.1: Display the first 25 rows of the 'CarName' column.\n","df['CarName'].head(25)"],"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0           alfa-romero giulia\n","1          alfa-romero stelvio\n","2     alfa-romero Quadrifoglio\n","3                  audi 100 ls\n","4                   audi 100ls\n","5                     audi fox\n","6                   audi 100ls\n","7                    audi 5000\n","8                    audi 4000\n","9          audi 5000s (diesel)\n","10                    bmw 320i\n","11                    bmw 320i\n","12                      bmw x1\n","13                      bmw x3\n","14                      bmw z4\n","15                      bmw x4\n","16                      bmw x5\n","17                      bmw x3\n","18            chevrolet impala\n","19       chevrolet monte carlo\n","20         chevrolet vega 2300\n","21               dodge rampage\n","22         dodge challenger se\n","23                  dodge d200\n","24           dodge monaco (sw)\n","Name: CarName, dtype: object"]},"metadata":{},"execution_count":4}]},{"cell_type":"markdown","metadata":{"id":"iVKoLpUCOdya"},"source":["Notice that the name of a car follows the name of its manufacturer as illustrated below: \n","\n","- `alfa-romero` is the manufacturer of `giulia, stelvio` etc cars, \n","\n","- `audi` is the manufacturer of `100 ls, fox` etc cars, \n","\n","- `bmw` is the manufacturer of `x1, x3` etc cars\n","\n","and so on.\n","\n","Thus, you need to extract the string before a space. "]},{"cell_type":"code","metadata":{"id":"92qIjB90Yk7S","executionInfo":{"status":"ok","timestamp":1635414522679,"user_tz":-330,"elapsed":445,"user":{"displayName":"Arhan Singhal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg4PdbuZAsAVBem9gfXxGllkTugQRSsMItz_luU=s64","userId":"10909470486853968911"}}},"source":["# S2.2: Extract the name of the manufactures from the car names and display the first 25 cars to verify whether names are extracted successfully.\n","companies = pd.Series([i.split(' ')[0] for i in df['CarName']] , index= df.index)"],"execution_count":6,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Wb8NNJ_-Ohq7"},"source":["Let's add a new column to the `cars_df` DataFrame that stores the company names."]},{"cell_type":"code","metadata":{"id":"UDnJ-hXmOmwk","colab":{"base_uri":"https://localhost:8080/","height":501},"executionInfo":{"status":"ok","timestamp":1635414585183,"user_tz":-330,"elapsed":501,"user":{"displayName":"Arhan Singhal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg4PdbuZAsAVBem9gfXxGllkTugQRSsMItz_luU=s64","userId":"10909470486853968911"}},"outputId":"82a7e005-1a3e-4b67-bdc7-b495b1c9f008"},"source":["# S2.3: Create a new column named 'car_company'. It should store the company names of a the cars.\n","df['car_company'] = companies \n","df"],"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>car_ID</th>\n","      <th>symboling</th>\n","      <th>CarName</th>\n","      <th>fueltype</th>\n","      <th>aspiration</th>\n","      <th>doornumber</th>\n","      <th>carbody</th>\n","      <th>drivewheel</th>\n","      <th>enginelocation</th>\n","      <th>wheelbase</th>\n","      <th>carlength</th>\n","      <th>carwidth</th>\n","      <th>carheight</th>\n","      <th>curbweight</th>\n","      <th>enginetype</th>\n","      <th>cylindernumber</th>\n","      <th>enginesize</th>\n","      <th>fuelsystem</th>\n","      <th>boreratio</th>\n","      <th>stroke</th>\n","      <th>compressionratio</th>\n","      <th>horsepower</th>\n","      <th>peakrpm</th>\n","      <th>citympg</th>\n","      <th>highwaympg</th>\n","      <th>price</th>\n","      <th>car_company</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>alfa-romero giulia</td>\n","      <td>gas</td>\n","      <td>std</td>\n","      <td>two</td>\n","      <td>convertible</td>\n","      <td>rwd</td>\n","      <td>front</td>\n","      <td>88.6</td>\n","      <td>168.8</td>\n","      <td>64.1</td>\n","      <td>48.8</td>\n","      <td>2548</td>\n","      <td>dohc</td>\n","      <td>four</td>\n","      <td>130</td>\n","      <td>mpfi</td>\n","      <td>3.47</td>\n","      <td>2.68</td>\n","      <td>9.0</td>\n","      <td>111</td>\n","      <td>5000</td>\n","      <td>21</td>\n","      <td>27</td>\n","      <td>13495.0</td>\n","      <td>alfa-romero</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>3</td>\n","      <td>alfa-romero stelvio</td>\n","      <td>gas</td>\n","      <td>std</td>\n","      <td>two</td>\n","      <td>convertible</td>\n","      <td>rwd</td>\n","      <td>front</td>\n","      <td>88.6</td>\n","      <td>168.8</td>\n","      <td>64.1</td>\n","      <td>48.8</td>\n","      <td>2548</td>\n","      <td>dohc</td>\n","      <td>four</td>\n","      <td>130</td>\n","      <td>mpfi</td>\n","      <td>3.47</td>\n","      <td>2.68</td>\n","      <td>9.0</td>\n","      <td>111</td>\n","      <td>5000</td>\n","      <td>21</td>\n","      <td>27</td>\n","      <td>16500.0</td>\n","      <td>alfa-romero</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>alfa-romero Quadrifoglio</td>\n","      <td>gas</td>\n","      <td>std</td>\n","      <td>two</td>\n","      <td>hatchback</td>\n","      <td>rwd</td>\n","      <td>front</td>\n","      <td>94.5</td>\n","      <td>171.2</td>\n","      <td>65.5</td>\n","      <td>52.4</td>\n","      <td>2823</td>\n","      <td>ohcv</td>\n","      <td>six</td>\n","      <td>152</td>\n","      <td>mpfi</td>\n","      <td>2.68</td>\n","      <td>3.47</td>\n","      <td>9.0</td>\n","      <td>154</td>\n","      <td>5000</td>\n","      <td>19</td>\n","      <td>26</td>\n","      <td>16500.0</td>\n","      <td>alfa-romero</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>2</td>\n","      <td>audi 100 ls</td>\n","      <td>gas</td>\n","      <td>std</td>\n","      <td>four</td>\n","      <td>sedan</td>\n","      <td>fwd</td>\n","      <td>front</td>\n","      <td>99.8</td>\n","      <td>176.6</td>\n","      <td>66.2</td>\n","      <td>54.3</td>\n","      <td>2337</td>\n","      <td>ohc</td>\n","      <td>four</td>\n","      <td>109</td>\n","      <td>mpfi</td>\n","      <td>3.19</td>\n","      <td>3.40</td>\n","      <td>10.0</td>\n","      <td>102</td>\n","      <td>5500</td>\n","      <td>24</td>\n","      <td>30</td>\n","      <td>13950.0</td>\n","      <td>audi</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>2</td>\n","      <td>audi 100ls</td>\n","      <td>gas</td>\n","      <td>std</td>\n","      <td>four</td>\n","      <td>sedan</td>\n","      <td>4wd</td>\n","      <td>front</td>\n","      <td>99.4</td>\n","      <td>176.6</td>\n","      <td>66.4</td>\n","      <td>54.3</td>\n","      <td>2824</td>\n","      <td>ohc</td>\n","      <td>five</td>\n","      <td>136</td>\n","      <td>mpfi</td>\n","      <td>3.19</td>\n","      <td>3.40</td>\n","      <td>8.0</td>\n","      <td>115</td>\n","      <td>5500</td>\n","      <td>18</td>\n","      <td>22</td>\n","      <td>17450.0</td>\n","      <td>audi</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>200</th>\n","      <td>201</td>\n","      <td>-1</td>\n","      <td>volvo 145e (sw)</td>\n","      <td>gas</td>\n","      <td>std</td>\n","      <td>four</td>\n","      <td>sedan</td>\n","      <td>rwd</td>\n","      <td>front</td>\n","      <td>109.1</td>\n","      <td>188.8</td>\n","      <td>68.9</td>\n","      <td>55.5</td>\n","      <td>2952</td>\n","      <td>ohc</td>\n","      <td>four</td>\n","      <td>141</td>\n","      <td>mpfi</td>\n","      <td>3.78</td>\n","      <td>3.15</td>\n","      <td>9.5</td>\n","      <td>114</td>\n","      <td>5400</td>\n","      <td>23</td>\n","      <td>28</td>\n","      <td>16845.0</td>\n","      <td>volvo</td>\n","    </tr>\n","    <tr>\n","      <th>201</th>\n","      <td>202</td>\n","      <td>-1</td>\n","      <td>volvo 144ea</td>\n","      <td>gas</td>\n","      <td>turbo</td>\n","      <td>four</td>\n","      <td>sedan</td>\n","      <td>rwd</td>\n","      <td>front</td>\n","      <td>109.1</td>\n","      <td>188.8</td>\n","      <td>68.8</td>\n","      <td>55.5</td>\n","      <td>3049</td>\n","      <td>ohc</td>\n","      <td>four</td>\n","      <td>141</td>\n","      <td>mpfi</td>\n","      <td>3.78</td>\n","      <td>3.15</td>\n","      <td>8.7</td>\n","      <td>160</td>\n","      <td>5300</td>\n","      <td>19</td>\n","      <td>25</td>\n","      <td>19045.0</td>\n","      <td>volvo</td>\n","    </tr>\n","    <tr>\n","      <th>202</th>\n","      <td>203</td>\n","      <td>-1</td>\n","      <td>volvo 244dl</td>\n","      <td>gas</td>\n","      <td>std</td>\n","      <td>four</td>\n","      <td>sedan</td>\n","      <td>rwd</td>\n","      <td>front</td>\n","      <td>109.1</td>\n","      <td>188.8</td>\n","      <td>68.9</td>\n","      <td>55.5</td>\n","      <td>3012</td>\n","      <td>ohcv</td>\n","      <td>six</td>\n","      <td>173</td>\n","      <td>mpfi</td>\n","      <td>3.58</td>\n","      <td>2.87</td>\n","      <td>8.8</td>\n","      <td>134</td>\n","      <td>5500</td>\n","      <td>18</td>\n","      <td>23</td>\n","      <td>21485.0</td>\n","      <td>volvo</td>\n","    </tr>\n","    <tr>\n","      <th>203</th>\n","      <td>204</td>\n","      <td>-1</td>\n","      <td>volvo 246</td>\n","      <td>diesel</td>\n","      <td>turbo</td>\n","      <td>four</td>\n","      <td>sedan</td>\n","      <td>rwd</td>\n","      <td>front</td>\n","      <td>109.1</td>\n","      <td>188.8</td>\n","      <td>68.9</td>\n","      <td>55.5</td>\n","      <td>3217</td>\n","      <td>ohc</td>\n","      <td>six</td>\n","      <td>145</td>\n","      <td>idi</td>\n","      <td>3.01</td>\n","      <td>3.40</td>\n","      <td>23.0</td>\n","      <td>106</td>\n","      <td>4800</td>\n","      <td>26</td>\n","      <td>27</td>\n","      <td>22470.0</td>\n","      <td>volvo</td>\n","    </tr>\n","    <tr>\n","      <th>204</th>\n","      <td>205</td>\n","      <td>-1</td>\n","      <td>volvo 264gl</td>\n","      <td>gas</td>\n","      <td>turbo</td>\n","      <td>four</td>\n","      <td>sedan</td>\n","      <td>rwd</td>\n","      <td>front</td>\n","      <td>109.1</td>\n","      <td>188.8</td>\n","      <td>68.9</td>\n","      <td>55.5</td>\n","      <td>3062</td>\n","      <td>ohc</td>\n","      <td>four</td>\n","      <td>141</td>\n","      <td>mpfi</td>\n","      <td>3.78</td>\n","      <td>3.15</td>\n","      <td>9.5</td>\n","      <td>114</td>\n","      <td>5400</td>\n","      <td>19</td>\n","      <td>25</td>\n","      <td>22625.0</td>\n","      <td>volvo</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>205 rows × 27 columns</p>\n","</div>"],"text/plain":["     car_ID  symboling  ...    price  car_company\n","0         1          3  ...  13495.0  alfa-romero\n","1         2          3  ...  16500.0  alfa-romero\n","2         3          1  ...  16500.0  alfa-romero\n","3         4          2  ...  13950.0         audi\n","4         5          2  ...  17450.0         audi\n","..      ...        ...  ...      ...          ...\n","200     201         -1  ...  16845.0        volvo\n","201     202         -1  ...  19045.0        volvo\n","202     203         -1  ...  21485.0        volvo\n","203     204         -1  ...  22470.0        volvo\n","204     205         -1  ...  22625.0        volvo\n","\n","[205 rows x 27 columns]"]},"metadata":{},"execution_count":7}]},{"cell_type":"markdown","metadata":{"id":"Axr__MNIbxk7"},"source":["You may get the count of number of the cars sold by each manufacturer in the dataset."]},{"cell_type":"code","metadata":{"id":"ngKfiuUHaFRU","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1635414686257,"user_tz":-330,"elapsed":15,"user":{"displayName":"Arhan Singhal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg4PdbuZAsAVBem9gfXxGllkTugQRSsMItz_luU=s64","userId":"10909470486853968911"}},"outputId":"185fb3e7-9a35-40c9-caf2-4a6ab5ac2d90"},"source":["# S2.4: Get the count of number of the cars sold by each manufacturer in the dataset.\n","df['car_company'].value_counts()"],"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"text/plain":["toyota         31\n","nissan         17\n","mazda          15\n","mitsubishi     13\n","honda          13\n","subaru         12\n","volvo          11\n","peugeot        11\n","dodge           9\n","volkswagen      9\n","buick           8\n","bmw             8\n","plymouth        7\n","audi            7\n","saab            6\n","porsche         4\n","isuzu           4\n","jaguar          3\n","chevrolet       3\n","alfa-romero     3\n","renault         2\n","maxda           2\n","vw              2\n","porcshce        1\n","vokswagen       1\n","toyouta         1\n","mercury         1\n","Nissan          1\n","Name: car_company, dtype: int64"]},"metadata":{},"execution_count":10}]},{"cell_type":"markdown","metadata":{"id":"g86xk0ALOrtd"},"source":["As you can see, Toyota has sold the highest number of cars in this dataset.\n","\n","Notice that the following manufacturer names are misspelled or not regularised (follows the same case i.e. uppper case or lower case or title case): \n","\n","- `vw` and `vokswagen` should be `volkswagen`, \n","\n","- `porcshce` should be `porsche`, \n","\n","- `toyouta` should be `toyota`, \n","\n","- `Nissan` should be `nissan`, \n","\n","- `maxda` should be `mazda`\n","\n","To maintain the quality of data, let's resolve the above issues."]},{"cell_type":"code","metadata":{"id":"LQ1RrXpFOt7e","executionInfo":{"status":"ok","timestamp":1635415043645,"user_tz":-330,"elapsed":577,"user":{"displayName":"Arhan Singhal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg4PdbuZAsAVBem9gfXxGllkTugQRSsMItz_luU=s64","userId":"10909470486853968911"}}},"source":["# S2.5: Replace the misspelled 'car_company' names with their correct names.\n","\n","# volkswagen\n","df.loc[(df['car_company']== 'vw')|(df['car_company']=='vokswagen'),'car_company'] = 'volkswagen'\n","# porsche\n","df.loc[(df['car_company']== 'porcshce'),'car_company'] = 'porsche'\n","# toyota\n","df.loc[(df['car_company']== 'toyouta'),'car_company'] = 'toyota'\n","# nissan\n","df.loc[(df['car_company']== 'Nissan'),'car_company'] = 'nissan'\n","# mazda\n","df.loc[(df['car_company']== 'maxda'),'car_company'] = 'mazda'"],"execution_count":11,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"7ldJklvGcYys"},"source":["Now get the count of number of the cars sold by each manufacturer in the dataset again to verify whether the names are corrected successfully or not."]},{"cell_type":"code","metadata":{"id":"keDlpEGcOvop","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1635415071543,"user_tz":-330,"elapsed":482,"user":{"displayName":"Arhan Singhal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg4PdbuZAsAVBem9gfXxGllkTugQRSsMItz_luU=s64","userId":"10909470486853968911"}},"outputId":"4736a156-33a7-4991-e4e0-d0857e63ca5a"},"source":["# S2.6: Get the count of number of the cars sold by each manufacturer in the dataset again\n","df['car_company'].value_counts()"],"execution_count":12,"outputs":[{"output_type":"execute_result","data":{"text/plain":["toyota         32\n","nissan         18\n","mazda          17\n","honda          13\n","mitsubishi     13\n","volkswagen     12\n","subaru         12\n","peugeot        11\n","volvo          11\n","dodge           9\n","buick           8\n","bmw             8\n","audi            7\n","plymouth        7\n","saab            6\n","porsche         5\n","isuzu           4\n","jaguar          3\n","chevrolet       3\n","alfa-romero     3\n","renault         2\n","mercury         1\n","Name: car_company, dtype: int64"]},"metadata":{},"execution_count":12}]},{"cell_type":"markdown","metadata":{"id":"mxLBYYlqOxwB"},"source":["Finally the manufacturer names are successfully corrected. Let's now drop the `'CarName'` column as it is of no use to us."]},{"cell_type":"code","metadata":{"id":"vh3djZ0jO1Td","executionInfo":{"status":"ok","timestamp":1635415175839,"user_tz":-330,"elapsed":1729,"user":{"displayName":"Arhan Singhal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg4PdbuZAsAVBem9gfXxGllkTugQRSsMItz_luU=s64","userId":"10909470486853968911"}}},"source":["# S2.7: Drop 'CarName' column from the 'cars_df' DataFrame.\n","df.drop(['CarName'],axis =1, inplace= True)\n"],"execution_count":13,"outputs":[]},{"cell_type":"code","metadata":{"id":"kZ_TLd5BO24p","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1635415183106,"user_tz":-330,"elapsed":408,"user":{"displayName":"Arhan Singhal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg4PdbuZAsAVBem9gfXxGllkTugQRSsMItz_luU=s64","userId":"10909470486853968911"}},"outputId":"27cb78ff-6f9c-4fd2-d348-d525937ddffe"},"source":["# S2.8: Print the names of the columns to verify whether the 'CarName' column is dropped or not.\n","df.columns"],"execution_count":14,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['car_ID', 'symboling', 'fueltype', 'aspiration', 'doornumber',\n","       'carbody', 'drivewheel', 'enginelocation', 'wheelbase', 'carlength',\n","       'carwidth', 'carheight', 'curbweight', 'enginetype', 'cylindernumber',\n","       'enginesize', 'fuelsystem', 'boreratio', 'stroke', 'compressionratio',\n","       'horsepower', 'peakrpm', 'citympg', 'highwaympg', 'price',\n","       'car_company'],\n","      dtype='object')"]},"metadata":{},"execution_count":14}]},{"cell_type":"markdown","metadata":{"id":"pnvF-2yUfjSM"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"a2XCTJnXN6ZV"},"source":["#### Activity 3: Data Preparation^^\n","\n","To build linear regression, all the features need to have numeric values. \n","\n","So, let's first extract all the numeric features from the `cars_df` DataFrame. For this, you need to use the `select_dtypes()` function. It takes a list of data-types (in the form of strings) as inputs that need to be extracted.\n","\n","**Syntax:** `data_frame.select_dtypes(include = ['data_type1', 'data_type2', ..., data_typeN])`\n","\n","where `'data_type1', 'data_type2', ..., data_typeN` are $N$ different types of data-types that you wish to extract.\n","\n","\n"]},{"cell_type":"code","metadata":{"id":"c93lTh9bgSDu","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1635415320821,"user_tz":-330,"elapsed":427,"user":{"displayName":"Arhan Singhal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg4PdbuZAsAVBem9gfXxGllkTugQRSsMItz_luU=s64","userId":"10909470486853968911"}},"outputId":"461c0b3e-95c6-4884-ce11-5a62b586da5d"},"source":["# S3.1: Use the 'info()' function to get the data-types of each column.\n","df.info()"],"execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 205 entries, 0 to 204\n","Data columns (total 26 columns):\n"," #   Column            Non-Null Count  Dtype  \n","---  ------            --------------  -----  \n"," 0   car_ID            205 non-null    int64  \n"," 1   symboling         205 non-null    int64  \n"," 2   fueltype          205 non-null    object \n"," 3   aspiration        205 non-null    object \n"," 4   doornumber        205 non-null    object \n"," 5   carbody           205 non-null    object \n"," 6   drivewheel        205 non-null    object \n"," 7   enginelocation    205 non-null    object \n"," 8   wheelbase         205 non-null    float64\n"," 9   carlength         205 non-null    float64\n"," 10  carwidth          205 non-null    float64\n"," 11  carheight         205 non-null    float64\n"," 12  curbweight        205 non-null    int64  \n"," 13  enginetype        205 non-null    object \n"," 14  cylindernumber    205 non-null    object \n"," 15  enginesize        205 non-null    int64  \n"," 16  fuelsystem        205 non-null    object \n"," 17  boreratio         205 non-null    float64\n"," 18  stroke            205 non-null    float64\n"," 19  compressionratio  205 non-null    float64\n"," 20  horsepower        205 non-null    int64  \n"," 21  peakrpm           205 non-null    int64  \n"," 22  citympg           205 non-null    int64  \n"," 23  highwaympg        205 non-null    int64  \n"," 24  price             205 non-null    float64\n"," 25  car_company       205 non-null    object \n","dtypes: float64(8), int64(8), object(10)\n","memory usage: 41.8+ KB\n"]}]},{"cell_type":"markdown","metadata":{"id":"n7l9_-1KgfJf"},"source":["The numeric objects are of `int64` and `float64` data-types. You need to extract the features having these data-types."]},{"cell_type":"code","metadata":{"id":"oTDuc7NCN8IC","colab":{"base_uri":"https://localhost:8080/","height":202},"executionInfo":{"status":"ok","timestamp":1635415445337,"user_tz":-330,"elapsed":446,"user":{"displayName":"Arhan Singhal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg4PdbuZAsAVBem9gfXxGllkTugQRSsMItz_luU=s64","userId":"10909470486853968911"}},"outputId":"2e7af101-1b39-43b4-d613-439b6b76d461"},"source":["# S3.2: Extract all the numeric (float and int type) columns from the dataset.\n","df2 = df.select_dtypes(include=['int64','float64'])\n","df2.head()"],"execution_count":16,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>car_ID</th>\n","      <th>symboling</th>\n","      <th>wheelbase</th>\n","      <th>carlength</th>\n","      <th>carwidth</th>\n","      <th>carheight</th>\n","      <th>curbweight</th>\n","      <th>enginesize</th>\n","      <th>boreratio</th>\n","      <th>stroke</th>\n","      <th>compressionratio</th>\n","      <th>horsepower</th>\n","      <th>peakrpm</th>\n","      <th>citympg</th>\n","      <th>highwaympg</th>\n","      <th>price</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>88.6</td>\n","      <td>168.8</td>\n","      <td>64.1</td>\n","      <td>48.8</td>\n","      <td>2548</td>\n","      <td>130</td>\n","      <td>3.47</td>\n","      <td>2.68</td>\n","      <td>9.0</td>\n","      <td>111</td>\n","      <td>5000</td>\n","      <td>21</td>\n","      <td>27</td>\n","      <td>13495.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>3</td>\n","      <td>88.6</td>\n","      <td>168.8</td>\n","      <td>64.1</td>\n","      <td>48.8</td>\n","      <td>2548</td>\n","      <td>130</td>\n","      <td>3.47</td>\n","      <td>2.68</td>\n","      <td>9.0</td>\n","      <td>111</td>\n","      <td>5000</td>\n","      <td>21</td>\n","      <td>27</td>\n","      <td>16500.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>94.5</td>\n","      <td>171.2</td>\n","      <td>65.5</td>\n","      <td>52.4</td>\n","      <td>2823</td>\n","      <td>152</td>\n","      <td>2.68</td>\n","      <td>3.47</td>\n","      <td>9.0</td>\n","      <td>154</td>\n","      <td>5000</td>\n","      <td>19</td>\n","      <td>26</td>\n","      <td>16500.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>2</td>\n","      <td>99.8</td>\n","      <td>176.6</td>\n","      <td>66.2</td>\n","      <td>54.3</td>\n","      <td>2337</td>\n","      <td>109</td>\n","      <td>3.19</td>\n","      <td>3.40</td>\n","      <td>10.0</td>\n","      <td>102</td>\n","      <td>5500</td>\n","      <td>24</td>\n","      <td>30</td>\n","      <td>13950.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>2</td>\n","      <td>99.4</td>\n","      <td>176.6</td>\n","      <td>66.4</td>\n","      <td>54.3</td>\n","      <td>2824</td>\n","      <td>136</td>\n","      <td>3.19</td>\n","      <td>3.40</td>\n","      <td>8.0</td>\n","      <td>115</td>\n","      <td>5500</td>\n","      <td>18</td>\n","      <td>22</td>\n","      <td>17450.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   car_ID  symboling  wheelbase  ...  citympg  highwaympg    price\n","0       1          3       88.6  ...       21          27  13495.0\n","1       2          3       88.6  ...       21          27  16500.0\n","2       3          1       94.5  ...       19          26  16500.0\n","3       4          2       99.8  ...       24          30  13950.0\n","4       5          2       99.4  ...       18          22  17450.0\n","\n","[5 rows x 16 columns]"]},"metadata":{},"execution_count":16}]},{"cell_type":"markdown","metadata":{"id":"5DibxHMRN_Zo"},"source":["The `car_ID` column is of no use to build a linear regression model. So, let's drop it."]},{"cell_type":"code","metadata":{"id":"cnsASyO1N_mm","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1635415525175,"user_tz":-330,"elapsed":494,"user":{"displayName":"Arhan Singhal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg4PdbuZAsAVBem9gfXxGllkTugQRSsMItz_luU=s64","userId":"10909470486853968911"}},"outputId":"ebd7bbc1-11a8-41d5-8bb6-507bbe304e88"},"source":["# S3.3: Drop the 'car_ID' column from the 'cars_numeric_df' DataFrame. \n","df2.drop(['car_ID'], axis = 1, inplace= True)"],"execution_count":19,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/pandas/core/frame.py:4174: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n"]}]},{"cell_type":"markdown","metadata":{"id":"Kt-ihOCBOM4i"},"source":["Let's find out the features that strongly and moderately are correlated to the price of a car."]},{"cell_type":"code","metadata":{"id":"4qmyNiuSOMRW","colab":{"base_uri":"https://localhost:8080/","height":943},"executionInfo":{"status":"ok","timestamp":1635415653438,"user_tz":-330,"elapsed":1969,"user":{"displayName":"Arhan Singhal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg4PdbuZAsAVBem9gfXxGllkTugQRSsMItz_luU=s64","userId":"10909470486853968911"}},"outputId":"ecb331e7-3f63-4772-df0f-6cd43724e0e2"},"source":["# S3.4: Draw a correlation heatmap between the numeric features.\n","plt.figure(figsize=(15,15))\n","sns.heatmap(df2.corr(),annot=True)\n","plt.show()"],"execution_count":21,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1080x1080 with 2 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"NJ6gIZaBOS0z"},"source":["The heatmap shows some useful insights:\n","\n","**Correlation of `price` with independent variables**\n","\n","- `price` is highly and positively correlated with `wheelbase, carlength, carwidth, curbweight, enginesize` and `horsepower` \n","\n","- `price` is negatively correlated to `citympg` and `highwaympg` (`-0.70` approximately). This suggest that cars having high mileage may fall in the 'economy' cars category, and are priced lower. These cars are designed to be affordable by the budget buyers who value more fuel efficiency mileage over powerful engine\n","\n","**Correlation among independent variables**\n","\n","- Many independent variables are highly correlated (top-left part of the heatmap) such as `wheelbase, carlength, curbweight, enginesize` etc. They are all measures of size and weight and are positively correlated\n","\n","So you need to be wary of multicollinearity in the linear regression model that you build.\n","\n","Now let's look at the first five rows of the `doornumber` and `cylindernumber` columns."]},{"cell_type":"code","metadata":{"id":"SkUDiftUO_LT","colab":{"base_uri":"https://localhost:8080/","height":202},"executionInfo":{"status":"ok","timestamp":1635415885816,"user_tz":-330,"elapsed":420,"user":{"displayName":"Arhan Singhal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg4PdbuZAsAVBem9gfXxGllkTugQRSsMItz_luU=s64","userId":"10909470486853968911"}},"outputId":"bc205731-5272-4f6b-a233-6948ac141b54"},"source":["# S3.5: Get the first five rows of the 'doornumber' and 'cylindernumber' columns.\n","df[['doornumber',\"cylindernumber\"]].head()"],"execution_count":23,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>doornumber</th>\n","      <th>cylindernumber</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>two</td>\n","      <td>four</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>two</td>\n","      <td>four</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>two</td>\n","      <td>six</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>four</td>\n","      <td>four</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>four</td>\n","      <td>five</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  doornumber cylindernumber\n","0        two           four\n","1        two           four\n","2        two            six\n","3       four           four\n","4       four           five"]},"metadata":{},"execution_count":23}]},{"cell_type":"markdown","metadata":{"id":"UtvfJwt3PCWO"},"source":["Notice that the `doornumber` and `cylindernumber` columns are supposed to have numeric type values. But the numbers are reported in the word of words. So, you need to replace these words with the corresponding numbers. For this you can use the `map()` function. But first let's get the counts of all the values in the above two columns so that we can verify with these counts whether the the conversion to numeric values was successful or not.\n","\n"]},{"cell_type":"code","metadata":{"id":"6q3rg6STPEH_","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1635415929621,"user_tz":-330,"elapsed":424,"user":{"displayName":"Arhan Singhal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg4PdbuZAsAVBem9gfXxGllkTugQRSsMItz_luU=s64","userId":"10909470486853968911"}},"outputId":"2cbae024-73b6-4a8d-ef1e-3696c92a20ba"},"source":["# S3.6: Count the occurrence of each value in the 'cylindernumber' column.\n","df['cylindernumber'].value_counts()"],"execution_count":24,"outputs":[{"output_type":"execute_result","data":{"text/plain":["four      159\n","six        24\n","five       11\n","eight       5\n","two         4\n","twelve      1\n","three       1\n","Name: cylindernumber, dtype: int64"]},"metadata":{},"execution_count":24}]},{"cell_type":"markdown","metadata":{"id":"8eQJwzs2oJXr"},"source":["So, you need to represent the above numbers (written in words) into their numeric forms. "]},{"cell_type":"code","metadata":{"id":"cQXUlk6zPF3N","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1635415956699,"user_tz":-330,"elapsed":454,"user":{"displayName":"Arhan Singhal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg4PdbuZAsAVBem9gfXxGllkTugQRSsMItz_luU=s64","userId":"10909470486853968911"}},"outputId":"574dd551-5663-4ac0-c627-9270cf196da2"},"source":["# S3.7: Count the occurrence of each value in the 'doornumber' column.\n","df['doornumber'].value_counts()"],"execution_count":25,"outputs":[{"output_type":"execute_result","data":{"text/plain":["four    115\n","two      90\n","Name: doornumber, dtype: int64"]},"metadata":{},"execution_count":25}]},{"cell_type":"markdown","metadata":{"id":"eptGzLc3opI4"},"source":["Here, you need to represent `two` and `four` to their numeric forms.Now, let's learn the `map()` function."]},{"cell_type":"markdown","metadata":{"id":"ou4MdnaonloW"},"source":["--- "]},{"cell_type":"markdown","metadata":{"id":"_MU9QdOBnmoD"},"source":["#### Activity 4: The `map()` Function^^^\n","\n","A map function is similar to a match the coloum exercise. You have a match one set of values with the other set of values.\n","\n","Here you need to map:\n","\n","- `two` to `2`\n","\n","- `three` to `3`\n","\n","- `four` to `4` \n","\n","- `five` to `5` \n","\n","- `six` to `6`\n","\n","- `eight` to `8`\n","\n","- `twelve` to `12`\n","\n","To do the above replacement, \n","\n","1. First, you need to create a dictionary in which the words are keys and their corresponding numeric representations are the values.\n","\n","2. Apply the `map()` function. It takes the dictionary created in step one as an input.\n","\n","Let's understand this concept with the help of an example. Let's first create a Pandas series containing the above 7 numbers in the word form. Then let's create a dictionary as discussed in the first point. And then apply the `map()` function.\n","\n"]},{"cell_type":"code","metadata":{"id":"JnT3lbPMpueY","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1635416352223,"user_tz":-330,"elapsed":488,"user":{"displayName":"Arhan Singhal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg4PdbuZAsAVBem9gfXxGllkTugQRSsMItz_luU=s64","userId":"10909470486853968911"}},"outputId":"fa142dd5-7288-448b-c3bc-5da9bd9518ff"},"source":["# T4.1: Use the 'map()' function to replace a words in a Pandas series to their corresponding numeric values.\n","\n","word = pd.Series(['two','three','four','five','six','eight','twelve'])\n","wd = {'two':2,\n","      'three':3,\n","      'four': 4,\n","      'five':5,\n","      'six': 6,\n","      'eight': 8,\n","      'twelve': 12}\n","word = word.map(wd)\n","print(word)"],"execution_count":28,"outputs":[{"output_type":"stream","name":"stdout","text":["0     2\n","1     3\n","2     4\n","3     5\n","4     6\n","5     8\n","6    12\n","dtype: int64\n"]}]},{"cell_type":"markdown","metadata":{"id":"D7_l-rdytCvA"},"source":["**How does the `map()` function works?**\n","\n","It iterates through each element in a series (or array), and then look for that item as a key in the dictionary (the input to the `map()` function). If the key is found, then it replaces the key with its corresponding value in the dictionary.\n"]},{"cell_type":"code","metadata":{"id":"p3kO9pkpPHkX","executionInfo":{"status":"ok","timestamp":1635416537297,"user_tz":-330,"elapsed":454,"user":{"displayName":"Arhan Singhal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg4PdbuZAsAVBem9gfXxGllkTugQRSsMItz_luU=s64","userId":"10909470486853968911"}}},"source":["# S4.1: Map the values of the 'doornumber' and 'cylindernumber' columns to their corresponding numeric values.\n","def maping(s):\n","  return s.map(wd)\n","df[['doornumber','cylindernumber']] = df[['doornumber','cylindernumber']].apply(maping, axis = 1)\n"],"execution_count":29,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"WCl-iNztujQM"},"source":["Now let's display the first five rows of the `'cylindernumber'` and `'doornumber'` columns to verify whether the replacement was successful or not. Let's also check whether the data-types are integer or not."]},{"cell_type":"code","metadata":{"id":"wpFuqr0DuIXN","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1635416563120,"user_tz":-330,"elapsed":434,"user":{"displayName":"Arhan Singhal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg4PdbuZAsAVBem9gfXxGllkTugQRSsMItz_luU=s64","userId":"10909470486853968911"}},"outputId":"8fb201e9-204e-4a61-a3df-9c4ea6bcaf08"},"source":["# S4.2: Display the first five rows of the 'cylindernumber' and 'doornumber' columns. Also, check whether the data-types are integer or not.\n","print(df[['doornumber','cylindernumber']])"],"execution_count":30,"outputs":[{"output_type":"stream","name":"stdout","text":["     doornumber  cylindernumber\n","0             2               4\n","1             2               4\n","2             2               6\n","3             4               4\n","4             4               5\n","..          ...             ...\n","200           4               4\n","201           4               4\n","202           4               6\n","203           4               6\n","204           4               4\n","\n","[205 rows x 2 columns]\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"607gs3TJbNQc","executionInfo":{"status":"ok","timestamp":1635416601102,"user_tz":-330,"elapsed":411,"user":{"displayName":"Arhan Singhal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg4PdbuZAsAVBem9gfXxGllkTugQRSsMItz_luU=s64","userId":"10909470486853968911"}},"outputId":"7eb93e66-8b35-4bed-8631-2f1229822f6d"},"source":["df.info()"],"execution_count":31,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 205 entries, 0 to 204\n","Data columns (total 25 columns):\n"," #   Column            Non-Null Count  Dtype  \n","---  ------            --------------  -----  \n"," 0   symboling         205 non-null    int64  \n"," 1   fueltype          205 non-null    object \n"," 2   aspiration        205 non-null    object \n"," 3   doornumber        205 non-null    int64  \n"," 4   carbody           205 non-null    object \n"," 5   drivewheel        205 non-null    object \n"," 6   enginelocation    205 non-null    object \n"," 7   wheelbase         205 non-null    float64\n"," 8   carlength         205 non-null    float64\n"," 9   carwidth          205 non-null    float64\n"," 10  carheight         205 non-null    float64\n"," 11  curbweight        205 non-null    int64  \n"," 12  enginetype        205 non-null    object \n"," 13  cylindernumber    205 non-null    int64  \n"," 14  enginesize        205 non-null    int64  \n"," 15  fuelsystem        205 non-null    object \n"," 16  boreratio         205 non-null    float64\n"," 17  stroke            205 non-null    float64\n"," 18  compressionratio  205 non-null    float64\n"," 19  horsepower        205 non-null    int64  \n"," 20  peakrpm           205 non-null    int64  \n"," 21  citympg           205 non-null    int64  \n"," 22  highwaympg        205 non-null    int64  \n"," 23  price             205 non-null    float64\n"," 24  car_company       205 non-null    object \n","dtypes: float64(8), int64(9), object(8)\n","memory usage: 40.2+ KB\n"]}]},{"cell_type":"markdown","metadata":{"id":"Y1Vivhfmvct1"},"source":["Let's stop here now. We are very close to building the linear regression model to predict the car prices that we shall continue from the next class."]},{"cell_type":"markdown","metadata":{"id":"iSWyMq-gv9vM"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"HqB16w5orIS9"},"source":["### **Project**\n","You can now attempt the **Applied Tech. Project 67 - Car Prices Prediction - Data Exploration** on your own.\n","\n","**Applied Tech. Project 67 - Car Prices Prediction - Data\n","Exploration**: https://colab.research.google.com/drive/1veWqbTIAiODYA8xMrXIT782MOU56ZXLx"]}]}